name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-android:
    name: Build Android APKs (split per ABI)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Flutter version
        run: flutter --version

      - name: Install dependencies
        run: flutter pub get

      - name: Build split-per-ABI release APKs
        run: flutter build apk --release --split-per-abi

      - name: Collect APKs
        run: |
          set -e
          mkdir -p dist
          # 将生成的APK复制并按ABI命名（如果不存在则忽略）
          cp build/app/outputs/flutter-apk/*arm64*-release.apk dist/half_read-android-arm64-v8a-${GITHUB_REF_NAME}.apk || true
          cp build/app/outputs/flutter-apk/*armeabi-v7a*-release.apk dist/half_read-android-armeabi-v7a-${GITHUB_REF_NAME}.apk || true
          cp build/app/outputs/flutter-apk/*x86_64*-release.apk dist/half_read-android-x86_64-${GITHUB_REF_NAME}.apk || true
          echo "Collected files:" && ls -la dist

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: dist/*
          if-no-files-found: error

  build-windows:
    name: Build Windows .exe (zipped folder)
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Enable Windows desktop
        run: flutter config --enable-windows-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows (Release)
        run: flutter build windows --release

      - name: Archive Windows runner Release folder
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $root = "$PWD"
          $buildRoot = Join-Path $root 'build/windows'
          $runnerRelease = Get-ChildItem -Path $buildRoot -Directory -Recurse |
            Where-Object { $_.Name -eq 'Release' -and $_.FullName -match '[\\/ ]runner[\\/]Release$' } |
            Select-Object -First 1
          if (-not $runnerRelease) {
            throw 'Failed to locate runner/Release folder under build/windows'
          }
          New-Item -ItemType Directory -Path (Join-Path $root 'dist') -Force | Out-Null
          $zipPath = Join-Path (Join-Path $root 'dist') ("half_read-windows-x64-$env:GITHUB_REF_NAME.zip")
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          [System.IO.Compression.ZipFile]::CreateFromDirectory($runnerRelease.FullName, $zipPath)
          Write-Host "Created: $zipPath"

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: dist/*.zip
          if-no-files-found: error

  release:
    name: Create GitHub Release and upload assets
    runs-on: ubuntu-latest
    needs: [build-android, build-windows]
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: List artifacts
        run: ls -R dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/**
          fail_on_unmatched_files: true
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
